Brown APIs JSON Requests
Brown APIs Team (Joe Engelman, Justin Brower)
Nov. 27th, 2014

/////////////////////////////////////////////////////////////////////////////////////

BASE_PATH = "https://api.brown.edu/"

/////////////////////////////////////////////////////////////////////////////////////

Brown Shuttle (suffix = "shuttle/")

	Each request to the shuttle endpoint must begin with the type of request 
		('req_type'). This is followed by additional data for specific requests
		(if required).

	REQ_SHUTTLE_IDS = 0
	Format: {'req_type':REQ_SHUTTLE_IDS}
	Returns: a list of shuttle IDs in the form {'ids':[id1, id2, id3, ...]}
		Note: if there are no shuttles running, an empty list will be returned

	REQ_STOPS = 1
	Format: {'req_type':REQ_STOPS, 'time':EVENING/DAYTIME/CURRENT}
		where EVENING = 'evening', DAYTIME = 'daytime', CURRENT = 'current'
	Returns: a list of shuttle stops (name, coord) for given time of day in
		the form {'stops': [(stop1_name, stop1_loc), (stop2_name, stop2_loc), ...]}
		Note: if there are no shuttles running, an empty list will be returned

	REQ_SHUTTLE_INFO = 2
	Format: {'req_type':REQ_SHUTTLE_INFO, 'id':SHUTTLE_ID}
		where SHUTTLE_ID is an ID of a shuttle
	Returns: a JSON dictionary full of shuttle information with the following data:
		'id':SHUTTLE_ID 				-> id of shuttle
		'loc':SHUTTLE_LOC 				-> location of shuttle
		'next_stop':SHUTTLE_STOP		-> next stop for this shuttle
		'eta':SHUTTLE_ETA				-> estimated time of arrival for next stop
		'occupancy':SHUTTLE_OCCUPANCY	-> current occupancy of shuttle
		'speed':SHUTTLE_SPEED			-> speed of this shuttle
		NOTE: if the shuttle is not currently operating, then a response of the form
			{'id':SHUTTLE_ID, 'loc':0} will be returned

	REQ_SHUTTLE_LOC = 3
	Format: {'req_type':REQ_SHUTTLE, 'id':SHUTTLE_ID}
	Returns: a shuttle's location in the form {'id':SHUTTLE_ID, 'loc':SHUTTLE_LOC}
		Note: if the shuttle is not running, then 'loc':0 will be returned

/////////////////////////////////////////////////////////////////////////////////////

Brown Dining Services (suffix: "dining/")

	Each request to the dining endpoint must begin with the type of request 
		('req_type'). This is followed by additional data for specific requests.

	Dining constants: 	RATTY = 'ratty'
						VDUB  = 'vdub'
						ACO	  = 'andrews'
						IVY	  = 'ivy'
						JOS   = 'jos'
						BLUE  = 'blueroom'
						... (also? SCILI, BARHO, NELSON, etc)
						... (maybe include an 'all' option?)

	REQ_DINING_MENU = 0
	Format: {'req_type':REQ_DINING_MENU, 'eatery':RATTY/VDUB/..., 'time':TIME_OF_DAY}
	Returns: a dictionary of section titles mapped to items in the form
		{'eatery':RATTY/VDUB/..., 'menu':{'section1':[item1, item2, ...], ...}}
		NOTE: if the eatery is closed, an empty dictionary will be returned

	REQ_DINING_HOURS = 1
	Format: {'req_type':REQ_DINING_HOURS, 'eatery':RATTY/VDUB/..., 'date':DAY}
	Returns: {'eatery':RATTY/VDUB/..., 'open':OPEN_TIME, 'close':CLOSE_TIME}

	REQ_DINING_FIND = 2
	Format: {'req_type':REQ_DINING_FIND, 'food':NAME_OF_FOOD}
	Returns: where NAME_OF_FOOD is served and when it's served in the form
		{'food':NAME_OF_FOOD, 'eatery':RATTY/VDUB/..., 'start':START_TIME,
			'close':CLOSE_TIME}
		NOTE: if NAME_OF_FOOD is not served on campus, 'eatery' -> 0

	REQ_DINING_NUTRITION = 3
	Format: {'req_type':REQ_DINING_NUTRITIONAL, 'food':NAME_OF_FOOD}
	Returns: the nutritional information for NAME_OF_FOOD with the following data,
		'food':NAME_OF_FOOD
		'ingredients':[ingredient1, ingredient2, ...] -> some ingredients may
			contain sub-ingredients (e.g. "CHEESE (pasteurized part-skim milk, cheese
			culture, salt, enzymes)")
		and these fields: 'portion_size', 'calories', 'fat', 'saturated_fat',
			'cholesterol', 'sodium', 'carbohydrates', 'fiber', 'protein'
		NOTE: portion size is a string, calories is an integer representing calories,
			and all other measurements are in milligrams represented as floats

	REQ_DINING_OPEN_EATERIES = 4
	Format: {'req_type':REQ_DING_OPEN_EATERIES, 'time':TIME_OF_DAY}
		NOTE: if TIME_OF_DAY = 0, the current time will be used
	Returns: a list of open eateries at TIME_OF_DAY in the form
		{'time':CURRENT_TIME, 'open_eateries':[eatery1, eatery2, ...]}

/////////////////////////////////////////////////////////////////////////////////////

Brown Get Portal (suffix: "get/")

	Each request to the get portal endpoint must begin with the type of request 
		('req_type'). This is followed by additional data for specific requests
		(typically including a token once logged in).

	REQ_GET_LOGIN = 0
	Format: {'req_type':REQ_GET_LOGIN, 'username':USERNAME, 'password':PASSWORD}
		where PASSWORD is encrypted
	Returns: a boolean to signify success and a token for future requests in the form
		{'logged':TRUE/FALSE, 'token':TOKEN}

	REQ_GET_BALANCES = 1
	Format: {'req_type':REQ_GET_BALANCES, 'token':TOKEN}
	Returns: a mapping of fields to balances with the following fields: 'club_plan',
		'meal_credits', 'flex_points', 'bear_bucks', 'paw_prints', 'guest_meals'

	REQ_GET_TRANSACTION_HISTORY = 2
	Format: {'req_type':REQ_GET_TRANSACTION_HISTORY, 'token':TOKEN,
		'start':START_DATETIME, 'end':END_DATETIME} where start/end signify the span 
		of time to get transaction data from
	Returns: a list of transactions {'transactions':[trans1, trans2, ...]} where each
		transaction is a mapping with the keys 'field', 'datetime', 'details', 'amt'
		corresponding to the columns on the get portal website

/////////////////////////////////////////////////////////////////////////////////////

